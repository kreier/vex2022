{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nleft_drive_smart = Motor(Ports.PORT2, GearSetting.RATIO_18_1, False)\nright_drive_smart = Motor(Ports.PORT1, GearSetting.RATIO_18_1, True)\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 319.19, 295, 40, MM, 1)\nmotor_group_3_motor_a = Motor(Ports.PORT3, GearSetting.RATIO_36_1, False)\nmotor_group_3_motor_b = Motor(Ports.PORT4, GearSetting.RATIO_36_1, True)\nmotor_group_3 = MotorGroup(motor_group_3_motor_a, motor_group_3_motor_b)\ncontroller_1 = Controller(PRIMARY)\ngyro_a = Gyro(brain.three_wire_port.a)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n# define variables used for controlling motors based on controller inputs\ndrivetrain_l_needs_to_be_stopped_controller_1 = False\ndrivetrain_r_needs_to_be_stopped_controller_1 = False\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global drivetrain_l_needs_to_be_stopped_controller_1, drivetrain_r_needs_to_be_stopped_controller_1, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis3\n            # right = axis2\n            drivetrain_left_side_speed = controller_1.axis3.position()\n            drivetrain_right_side_speed = controller_1.axis2.position()\n            \n            # check if the value is inside of the deadband range\n            if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:\n                # check if the left motor has already been stopped\n                if drivetrain_l_needs_to_be_stopped_controller_1:\n                    # stop the left drive motor\n                    left_drive_smart.stop()\n                    # tell the code that the left motor has been stopped\n                    drivetrain_l_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the left motor next\n                # time the input is in the deadband range\n                drivetrain_l_needs_to_be_stopped_controller_1 = True\n            # check if the value is inside of the deadband range\n            if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:\n                # check if the right motor has already been stopped\n                if drivetrain_r_needs_to_be_stopped_controller_1:\n                    # stop the right drive motor\n                    right_drive_smart.stop()\n                    # tell the code that the right motor has been stopped\n                    drivetrain_r_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the right motor next\n                # time the input is in the deadband range\n                drivetrain_r_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_l_needs_to_be_stopped_controller_1:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_r_needs_to_be_stopped_controller_1:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n\n\n\n#endregion VEXcode Generated Robot Configuration\nx1 = 0\ny1 = 0\n\ndef Goto_targetx_mm_targety_mm_F_B_Direction(Goto_targetx_mm_targety_mm_F_B_Direction__targetx, Goto_targetx_mm_targety_mm_F_B_Direction__targety, Goto_targetx_mm_targety_mm_F_B_Direction__F_B):\n    global x1, y1\n    if Goto_targetx_mm_targety_mm_F_B_Direction__F_B == 0:\n        if False:\n            pass\n    else:\n        if math.atan((Goto_targetx_mm_targety_mm_F_B_Direction__targety - y1) / (Goto_targetx_mm_targety_mm_F_B_Direction__targetx - x1)) / math.pi * 180 > 180:\n            drivetrain.turn_for(LEFT, (math.atan((Goto_targetx_mm_targety_mm_F_B_Direction__targety - y1) / (Goto_targetx_mm_targety_mm_F_B_Direction__targetx - x1)) / math.pi * 180), DEGREES, wait=True)\n        else:\n            drivetrain.turn_for(RIGHT, (math.atan((Goto_targetx_mm_targety_mm_F_B_Direction__targety - y1) / (Goto_targetx_mm_targety_mm_F_B_Direction__targetx - x1)) / math.pi * 180), DEGREES, wait=True)\n        x1 = Goto_targetx_mm_targety_mm_F_B_Direction__targetx\n        y1 = Goto_targetx_mm_targety_mm_F_B_Direction__targety\n\ndef when_started1():\n    global x1, y1\n    x1 = -1400\n    x1 = 1320\n\ndef onevent_controller_1buttonR2_released_0():\n    global x1, y1\n    motor_group_3.stop()\n\n# system event handlers\ncontroller_1.buttonR2.released(onevent_controller_1buttonR2_released_0)\n# add 15ms delay to make sure events are registered correctly.\nwait(15, MSEC)\n\nwhen_started1()\n","textLanguage":"python","rconfig":[{"port":[2,1,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[3,4],"name":"motor_group_3","customName":false,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio36_1","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"tank","id":"primary"},"triportSourcePort":22},{"port":[1],"name":"gyro_a","customName":false,"deviceType":"Gyro","deviceClass":"gyro","setting":{"id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220215.18.00.00","appVersion":"","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}