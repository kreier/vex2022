{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nleft_drive_smart = Motor(Ports.PORT2, GearSetting.RATIO_18_1, False)\nright_drive_smart = Motor(Ports.PORT1, GearSetting.RATIO_18_1, True)\ndrivetrain_gyro = Gyro(brain.three_wire_port.a)\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, drivetrain_gyro, 319.19, 320, 40, MM, 1)\ncontroller_1 = Controller(PRIMARY)\nfork_motor_group_motor_a = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\nfork_motor_group_motor_b = Motor(Ports.PORT4, GearSetting.RATIO_18_1, True)\nfork_motor_group = MotorGroup(fork_motor_group_motor_a, fork_motor_group_motor_b)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Gyro\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Gyro\")\n    drivetrain_gyro.calibrate()\n    while drivetrain_gyro.is_calibrating():\n        sleep(25, MSEC)\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n# define variables used for controlling motors based on controller inputs\ndrivetrain_l_needs_to_be_stopped_controller_1 = False\ndrivetrain_r_needs_to_be_stopped_controller_1 = False\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global drivetrain_l_needs_to_be_stopped_controller_1, drivetrain_r_needs_to_be_stopped_controller_1, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis3\n            # right = axis2\n            drivetrain_left_side_speed = controller_1.axis3.position()\n            drivetrain_right_side_speed = controller_1.axis2.position()\n            \n            # check if the value is inside of the deadband range\n            if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:\n                # check if the left motor has already been stopped\n                if drivetrain_l_needs_to_be_stopped_controller_1:\n                    # stop the left drive motor\n                    left_drive_smart.stop()\n                    # tell the code that the left motor has been stopped\n                    drivetrain_l_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the left motor next\n                # time the input is in the deadband range\n                drivetrain_l_needs_to_be_stopped_controller_1 = True\n            # check if the value is inside of the deadband range\n            if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:\n                # check if the right motor has already been stopped\n                if drivetrain_r_needs_to_be_stopped_controller_1:\n                    # stop the right drive motor\n                    right_drive_smart.stop()\n                    # tell the code that the right motor has been stopped\n                    drivetrain_r_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the right motor next\n                # time the input is in the deadband range\n                drivetrain_r_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_l_needs_to_be_stopped_controller_1:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_r_needs_to_be_stopped_controller_1:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n\n\n\n#endregion VEXcode Generated Robot Configuration\nglobal x1 = 0\nglobal y1 = 0\n\ndef goto(target_x, target_y, reverse):\n    #x1 = gps.x_position(MM)\n    #y1 = gps.y_position(MM)\n    delta_x = target_x - x1\n    delta_y = target_y - y1\n    distance = math.sqrt(delta_x**2 + delta_y**2)     # pythagorean theorem\n    if ( delta_x == 0 ):\n        if ( delta_y < 0):\n            direction = 90\n        else:\n            direction = 270\n    else:\n        direction = - math.atan(delta_y / delta_x) * 180 / math.pi\n    if ( delta_x < 0 ):\n        direction = direction + 180\n    if ( reverse != 0 ):\n        direction = direction + 180\n    if ( direction > 360 ):\n        direction = direction - 360\n    drivetrain.turn_to_heading(direction, DEGREES, wait=True)\n    if ( reverse != 0 ):\n        drivetrain.drive_for(REVERSE, distance, MM, wait=True)\n    else:\n        drivetrain.drive_for(FORWARD, distance, MM, wait=True)\ndef pick_up():\n    fork_motor_group.spin_to_position(1500, DEGREES, wait=True)\ndef set_down():\n    fork_motor_group.spin_to_position(1800, DEGREES, wait=True)\n\ndef when_started1():\n    global myVariable, x1, y1\n    x1 = -1400\n    y1 = 1320\n    goto(0, 0, 0)\n\n# Calibrate the Drivetrain\ncalibrate_drivetrain()\n\nwhen_started1()\n","textLanguage":"python","rconfig":[{"port":[2,1,1],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"threewire","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"tank","id":"primary"},"triportSourcePort":22},{"port":[3,4],"name":"fork_motor_group","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220215.18.00.00","appVersion":"","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}