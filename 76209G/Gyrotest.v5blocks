{"mode":"Blocks","workspace":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><variables><variable type=\"\" id=\"U`9aA+=)r+L1tzA.)-qi\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">myVariable</variable><variable type=\"\" id=\"{b)wjy7%xuaFSG:*?1!i\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">counter</variable></variables><block type=\"v5_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"70\" y=\"110\"><next><block type=\"v5_looks_print\" id=\"FXp7fzOU$fuWOt5O*]_Z\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"[O[)I,1MT|]-Z}|,#n9u\"><field name=\"TEXT\">Calibrate Gyro:</field></shadow></value><next><block type=\"v5_sensing_calibrate_gyro\" id=\"$(RozvXFllT!.qPGi`DG\"><field name=\"GYRO\">GyroA</field><next><block type=\"v5_looks_next_row\" id=\"G,8lrE-*#l?2=D@e}DzY\"><field name=\"TARGET\">Brain</field><next><block type=\"v5_looks_print\" id=\"3^KOCm[PN(4k#|Mt!Dk-\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"5H.[UZ7tl.]/06`8SPH4\"><field name=\"TEXT\">Done!</field></shadow></value><next><block type=\"v5_control_forever\" id=\"Tm~;]0b`,TK!Fr*Ef;r!\"><statement name=\"SUBSTACK\"><block type=\"v5_looks_set_cursor\" id=\"*jBJc41g:8Fe+H3vxsQ)\"><field name=\"TARGET\">Brain</field><value name=\"ROW\"><shadow type=\"math_whole_number\" id=\"W@,^.Z]w.7uz/xooiJHd\"><field name=\"NUM\">4</field></shadow></value><value name=\"COLUMN\"><shadow type=\"math_whole_number\" id=\"@%qmg;3hQ)yj+];R=3F3\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"v5_looks_print\" id=\"oj%)t6lY$+`j_jt?:kMY\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"aX#0(3R}IN[S=mk%?6E[\"><field name=\"TEXT\">My current orientation is </field></shadow></value><next><block type=\"v5_looks_print\" id=\"0@QE?c9Mlk!$AUM+Lg+,\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"RmLsp:D}U`4C*2?;Ed`@\"><field name=\"TEXT\">VEXcode</field></shadow><block type=\"v5_sensing_heading_of_gyro\" id=\"f]Y6mD|Z#~ICnr`1kC5O\"><field name=\"GYRO\">GyroA</field></block></value><next><block type=\"v5_looks_print\" id=\"=..sZH1eId0?p!~9?G;+\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"xb=lVo]9J#w=A#oc8pIc\"><field name=\"TEXT\"> degrees.    </field></shadow></value><next><block type=\"v5_looks_next_row\" id=\"16V$5A[~QhmmL}#OrGiw\"><field name=\"TARGET\">Brain</field><next><block type=\"v5_looks_print\" id=\"u/%jydYx|p}sWqByx#ly\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"Nom5#DpT2Z.ciw~?_TND\"><field name=\"TEXT\">My current rotation is </field></shadow></value><next><block type=\"v5_looks_print\" id=\"q|G.ZJ-yU=DG7f`a!:FC\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"|ziEMh8LYG]OtZ9^.oWp\"><field name=\"TEXT\">VEXcode</field></shadow><block type=\"v5_sensing_rotation_of_gyro\" id=\"`t|!(9gu]Vo)9-pTT5?E\"><field name=\"GYRO\">GyroA</field></block></value><next><block type=\"v5_looks_print\" id=\"cMHqD-OVw8*Q1hePikGf\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"-6[:]_jkE?.8OIvx=_6i\"><field name=\"TEXT\"> degrees.    </field></shadow></value><next><block type=\"v5_looks_next_row\" id=\"M,-@J?ZT~C4V?VZlH;.i\"><field name=\"TARGET\">Brain</field><next><block type=\"v5_looks_print\" id=\".7(jh|@P{;5%O#_a[:BJ\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"jd@g?EXXaU*Il$^u,ij|\"><field name=\"TEXT\">VEXcode</field></shadow><block type=\"v5_variables_variable\" id=\"AU`9BOMN#BqPIQzHXS::\"><field name=\"VARIABLE\" id=\"{b)wjy7%xuaFSG:*?1!i\" variabletype=\"\">counter</field></block></value><next><block type=\"v5_looks_print\" id=\"VZImn2oqdFf,Ph|Up7Ii\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"xCfSq{wH)UaDOhih3U|-\"><field name=\"TEXT\">. </field></shadow></value><next><block type=\"v5_variables_change_variable\" id=\"#H[nE3c;ss{:fNeI%%-/\"><field name=\"VARIABLE\" id=\"{b)wjy7%xuaFSG:*?1!i\" variabletype=\"\">counter</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"O/:[!86^*TLH]_RMw~|@\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"v5_control_wait\" id=\"jWB5@~!%_3whNVxobfM`\"><value name=\"DURATION\"><shadow type=\"math_positive_number\" id=\";tCT+]ZBkro-7|/NhvX~\"><field name=\"NUM\">0.1</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></next></block></next></block></next></block></next></block></next></block></xml>","rconfig":[{"port":[1],"name":"GyroA","customName":false,"deviceType":"Gyro","deviceClass":"gyro","setting":{},"triportSourcePort":22}],"slot":2,"platform":"V5","sdkVersion":"20220215.18.00.00","appVersion":"2.3.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\ngyro GyroA = gyro(Brain.ThreeWirePort.A);\n\n\n\n// Generated code.\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint Brain_precision = 0, Console_precision = 0;\n\nfloat myVariable, counter;\n\n// Used to find the format string for printing numbers with the\n// desired number of decimal places\nconst char* printToBrain_numberFormat() {\n  // look at the current precision setting to find the format string\n  switch(Brain_precision){\n    case 0:  return \"%.0f\"; // 0 decimal places (1)\n    case 1:  return \"%.1f\"; // 1 decimal place  (0.1)\n    case 2:  return \"%.2f\"; // 2 decimal places (0.01)\n    case 3:  return \"%.3f\"; // 3 decimal places (0.001)\n    default: return \"%f\"; // use the print system default for everthing else\n  }\n}\n\n// \"when started\" hat block\nint whenStarted1() {\n  Brain.Screen.print(\"Calibrate Gyro:\");\n  GyroA.startCalibration();\n  while (GyroA.isCalibrating()) { task::sleep(50); }\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Done!\");\n  while (true) {\n    Brain.Screen.setCursor(4, 1);\n    Brain.Screen.print(\"My current orientation is \");\n    Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(GyroA.heading(degrees)));\n    Brain.Screen.print(\" degrees.    \");\n    Brain.Screen.newLine();\n    Brain.Screen.print(\"My current rotation is \");\n    Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(GyroA.rotation(degrees)));\n    Brain.Screen.print(\" degrees.    \");\n    Brain.Screen.newLine();\n    Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(counter));\n    Brain.Screen.print(\". \");\n    counter = counter + 1.0;\n    wait(0.1, seconds);\n  wait(5, msec);\n  }\n  return 0;\n}\n\n\nint main() {\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n  whenStarted1();\n}","target":"Physical"}